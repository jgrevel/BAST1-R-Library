// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// KeepCols
LogicalVector KeepCols(DataFrame& df, CharacterVector& classes, CharacterVector& naStrings);
RcppExport SEXP _BAST1_KeepCols(SEXP dfSEXP, SEXP classesSEXP, SEXP naStringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type naStrings(naStringsSEXP);
    rcpp_result_gen = Rcpp::wrap(KeepCols(df, classes, naStrings));
    return rcpp_result_gen;
END_RCPP
}
// KeepColsCM
LogicalVector KeepColsCM(CharacterMatrix& CM, CharacterVector& naStrings);
RcppExport SEXP _BAST1_KeepColsCM(SEXP CMSEXP, SEXP naStringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type CM(CMSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type naStrings(naStringsSEXP);
    rcpp_result_gen = Rcpp::wrap(KeepColsCM(CM, naStrings));
    return rcpp_result_gen;
END_RCPP
}
// KeepColsNM
LogicalVector KeepColsNM(NumericMatrix& NM);
RcppExport SEXP _BAST1_KeepColsNM(SEXP NMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type NM(NMSEXP);
    rcpp_result_gen = Rcpp::wrap(KeepColsNM(NM));
    return rcpp_result_gen;
END_RCPP
}
// cppStats
DataFrame cppStats(IntegerVector id, NumericVector da);
RcppExport SEXP _BAST1_cppStats(SEXP idSEXP, SEXP daSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type da(daSEXP);
    rcpp_result_gen = Rcpp::wrap(cppStats(id, da));
    return rcpp_result_gen;
END_RCPP
}
// tabH
std::vector<std::string> tabH(std::string x);
RcppExport SEXP _BAST1_tabH(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tabH(x));
    return rcpp_result_gen;
END_RCPP
}
// tabB
SEXP tabB(std::string x);
RcppExport SEXP _BAST1_tabB(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tabB(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BAST1_KeepCols", (DL_FUNC) &_BAST1_KeepCols, 3},
    {"_BAST1_KeepColsCM", (DL_FUNC) &_BAST1_KeepColsCM, 2},
    {"_BAST1_KeepColsNM", (DL_FUNC) &_BAST1_KeepColsNM, 1},
    {"_BAST1_cppStats", (DL_FUNC) &_BAST1_cppStats, 2},
    {"_BAST1_tabH", (DL_FUNC) &_BAST1_tabH, 1},
    {"_BAST1_tabB", (DL_FUNC) &_BAST1_tabB, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BAST1(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
